<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于机试题的基础分享</title>
      <link href="/2021/10/14/11.21/"/>
      <url>/2021/10/14/11.21/</url>
      
        <content type="html"><![CDATA[<h1 id="1-坏键盘"><a href="#1-坏键盘" class="headerlink" title="1.坏键盘"></a>1.坏键盘</h1><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;ctype.h&gt;int put_stringr(const char s[])&#123;    int i=0;    int cnt=0;    while(s[i])&#123;        cnt++;        i++;    &#125;    return cnt;&#125;int main(void)&#123;    int i,j,k;    j=k=0;    char str_1[128];/*应该输入的字符串*/    char str_2[128];/*实际输入的字符串*/    printf(&quot;请输入应该输入的字符串:&quot;);scanf(&quot;%s&quot;,str_1);    printf(&quot;请输入实际输入的字符串:&quot;);scanf(&quot;%s&quot;,str_2);    printf(&quot;坏掉的键是：&quot;);    for(i=0;i&lt;put_stringr(str_1);i++)&#123;        if(str_1[i]!=str_2[j])&#123;            //printf(&quot;%c&quot;,str_1[i]);            printf(&quot;%c&quot;,toupper(str_1[i]));            j--;        &#125;        j++;    &#125;    printf(&quot;\n&quot;);    return 0;&#125;</code></pre><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li>我们要输入两个字符串，由于没有指定大小，所以我设定他的大小为128</li><li>然后重点是如何比较两个字符串。我先编写了put_stringer函数用以确定输入的字符串的长度，然后在主函数里面进行了比较</li><li>我设置了i，j两个循环变量，对两个字符串对应的位置进行比较，如果两个字符相等，同时j++，i++。如果对应位置不同，这说明原应该输入的字符按键是坏掉的，用toupper函数使其大写后输出该字符，同时i++但不对j进行操作</li><li>但为了简化，我使每一个循环中都有j++，而判断出不等时多出一个j–</li></ol><h1 id="2-车厢重组"><a href="#2-车厢重组" class="headerlink" title="2.车厢重组"></a>2.车厢重组</h1><h3 id="代码部分-1"><a href="#代码部分-1" class="headerlink" title="代码部分"></a>代码部分</h3><pre><code class="c">#include &lt;stdio.h&gt;#define swap(int,a,b) int c; c=a; a=b; b=c;int bsort(int a[],int n)&#123;    int i,j;    int cnt=0;    for(i=0;i&lt;n;i++)&#123;        for(j=1;j&lt;=n-i;j++)&#123;            if(a[j]&lt;a[j-1])&#123;                int temp=a[j-1];                a[j-1]=a[j];                a[j]=temp;                cnt++;            &#125;        &#125;    &#125;    return cnt;&#125;int main(void)&#123;    int n,i,j;    int a[n];    printf(&quot;有多少节车厢：&quot;);scanf(&quot;%d&quot;,&amp;n);    printf(&quot;他们的顺序：&quot;);    for(i=0;i&lt;n;i++)&#123;        scanf(&quot;%d&quot;,&amp;a[i]);    &#125;    printf(&quot;至少旋转%d次 \n&quot;,bsort(a,n)-n);    return 0;&#125;</code></pre><h3 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h3><ol><li>对题目分析，他其实就是一个简单的冒泡排序，每交换一次数值，则使计数的值+1，最后返回计数值就好</li><li>当然，我这里的冒泡排序，由于我使排序的循环多运行了n次所以在输出的时候是输出的返回值减n</li></ol><h1 id="3-矩阵逆置"><a href="#3-矩阵逆置" class="headerlink" title="3.矩阵逆置"></a>3.矩阵逆置</h1><h3 id="代码部分-2"><a href="#代码部分-2" class="headerlink" title="代码部分"></a>代码部分</h3><pre><code class="c">#include &lt;stdio.h&gt;int main(void)&#123;    int i,j;    int v[3][3];    printf(&quot;请输入这个矩阵\n&quot;);    for(i=0;i&lt;3;i++)&#123;        printf(&quot;第%d行:&quot;,i+1);        for(j=0;j&lt;3;j++)&#123;            scanf(&quot;%d&quot;,&amp;v[i][j]);        &#125;    &#125;    printf(&quot;这个矩阵的转置矩阵是\n&quot;);    for(j=0;j&lt;3;j++)&#123;        for(i=0;i&lt;3;i++)&#123;            printf(&quot;%3d &quot;,v[i][j]);        &#125;        printf(&quot;\n&quot;);    &#125;    return 0;&#125;  </code></pre><h3 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h3><ol><li>首先创建一个二维数组v[3][3]</li><li>对这个数组用循环赋值</li><li>用循环对数组的逆置进行输出</li><li>由i和j去指定v[i][j]去输入，而输出v[j][i]就实现了矩阵的逆置输出</li></ol><h1 id="4-汉诺塔"><a href="#4-汉诺塔" class="headerlink" title="4.汉诺塔"></a>4.汉诺塔</h1><h3 id="代码部分-3"><a href="#代码部分-3" class="headerlink" title="代码部分"></a>代码部分</h3><pre><code class="c">#include &lt;stdio.h&gt;int n_2(int n)&#123;    int l=1;    for(int i=0;i&lt;n;i++)&#123;        l=l*2;    &#125;    return l;&#125;/*用以求2的n次方，因为deepin系统无法用math.h库函数..*/int main(void)&#123;    int n;    printf(&quot;有多少个块：&quot;);scanf(&quot;%d&quot;,&amp;n);    printf(&quot;一共需要%d步&quot;,n_2(n)-1);    //由数学论证，n个块在三个柱子下需要移动2的n次方-1下    //具体论证由数学归纳法可证.....    return 0;&#125;</code></pre><h3 id="解释-3"><a href="#解释-3" class="headerlink" title="解释"></a>解释</h3><ol><li>因为这个题在数学里很常见，也有用数学求的方法，我就没有用递归</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络攻击技术</title>
      <link href="/2021/10/14/12.30/"/>
      <url>/2021/10/14/12.30/</url>
      
        <content type="html"><![CDATA[<h3 id="网络攻击技术大体分类"><a href="#网络攻击技术大体分类" class="headerlink" title="网络攻击技术大体分类"></a>网络攻击技术大体分类</h3><ol><li><p>输出值转义不完全<br>. 跨站式脚本攻击<br>. SQL注入攻击<br>. os命令攻击<br>. http首部注入攻击<br>. 邮件首部注入攻击<br>. 目录遍历攻击<br>. 远程文件包含漏洞   </p></li><li><p>设计或设置缺陷引发的漏洞<br>. 强制浏览<br>. 不正确的错误消息处理<br>. 开放重定向     </p></li><li><p>因会话管理疏忽引发的漏洞<br>. 会话劫持<br>. 会话固定攻击<br>. 跨站点请求伪造</p></li><li><p>其他<br>. 密码破解<br>. 点击劫持<br>. Dos攻击(DDos攻击)<br>. 后门程序 </p></li></ol><h3 id="针对web网络攻击技术简单概况"><a href="#针对web网络攻击技术简单概况" class="headerlink" title="针对ｗｅｂ网络攻击技术简单概况"></a>针对ｗｅｂ网络攻击技术简单概况</h3><ol><li>攻击对象是应用ｈｔｔｐ协议的客服端和服务器</li><li>大多数攻击web应用</li><li>产生的原因<br>. http协议本身不具有安全功能<br>. 客服端可以篡改ｈｔｔｐ请求<br>. 网页开发过程中的逻辑漏洞，使可以运行的ｗｅｂ应用后隐藏着许多ＢＵＧ</li></ol><h3 id="１．转义不完全的漏洞"><a href="#１．转义不完全的漏洞" class="headerlink" title="１．转义不完全的漏洞"></a>１．转义不完全的漏洞</h3><p>在客户端运行篡改数据或者关闭JavaScript时，在客户端输入的值按ｗｅｂ内部处理可能将其理解为构造程序的代码</p><ol><li>跨站式脚本攻击（XSS）<ol><li>定义：通过存在安全漏洞的ｗｅｂ网站注册用户的浏览器内运行非法的html标签或JavaScript代码进行的一种攻击</li><li>可以理解为，在表单内输入　“&lt;&gt;”时，浏览器识别到ｈｔｍｌ标签，会将其认为是原来的ｈｔｍｌ标签而使攻击者对整个页面进行修改而查看到他本无权查看的资源</li><li>当然对于这种输入框，你也可以在其中写　“<script> </script>”来插入一段ｊｓ代码，从而让浏览器显示出他本不应该显示的资源。例如插入“<script>document.write(escape(document.cookie);)</script>”来获取浏览器存储的cookie信息</li></ol></li><li>SQL注入攻击<ol><li>定义：针对ＷＥＢ应用的数据库,通过运行非法的SQL语句而产生的攻击</li><li>实例： ‘ or 1=’1 （万能密码）=&gt; select name,pass from tbAdmin where name=’’ or 1=’1’ and pass=’123456’ </li></ol></li><li>os注入攻击<ol><li>定义：通过ｗｅｂ运用，执行非法的操作系统命令（调用ｓｈｅｌｌ命令）</li></ol></li><li>ｈｔｔｐ首部注入攻击<ol><li>通过在响应首部字段插入换行，添加任意响应首部或主题的攻击</li><li>浏览器会将　%0D%0A ：换行符号后的语句看做新段而使攻击者能任意添加，覆盖原有的属性</li><li>连续插入两个换行符会产生主体与首部所需要的空行而使后面的原首部字段成为报文主体</li></ol></li><li>邮箱首部注入<ol><li>基本也是利用换行符号去实现篡改邮件文本内容，追加文本发送地址（非法监视他人邮件）</li></ol></li><li>目录遍历<ol><li>定义：对本不应该公开的文件目录，通过非法拦截目录路径后，达成访问的一种攻击</li><li>通过　../../ect/passwd的方式修改原来的ｕｒｌ查询字段</li></ol></li><li>远程文件漏洞　<ol><li>攻击者利用外部服务器的ｕｒｌ充当依赖文件，让脚本读取后，运行任意脚本</li><li>主要利用ｐｈｐ存在的漏洞对可以通过设定，指定外部服务器的ｕｒｌ作为文件名的功能漏洞进行攻击</li></ol></li></ol><h3 id="设计缺陷或设置缺陷引发的安全漏洞"><a href="#设计缺陷或设置缺陷引发的安全漏洞" class="headerlink" title="设计缺陷或设置缺陷引发的安全漏洞"></a>设计缺陷或设置缺陷引发的安全漏洞</h3><ol><li>强制浏览<ol><li>通过指定文件目录名称，在文件一览中看到显示的文件名</li><li>因为命名习惯而被攻击者推测出文件名</li><li>直接通过ｕｒｌ访问原本无权限访问的资源</li></ol></li><li>不正确的错误消息处理<ol><li>定义：ｗｅｂ应用的错误信息包含对攻击者有用的信息</li><li>未注册与密码错误</li><li>数据库等系统抛出的错误消息　=&gt;　显示与ｓｑｌ或者其他与数据库相关的消息，使攻击者确定ｗｅｂ使用的数据库选用</li></ol></li><li>开发重定向<ol><li>定义：利用对任意指定ＵＲＬ作为重定向跳转的功能，攻击者使用户跳转到恶意网站</li><li>攻击者修改重定向参数为陷阱网站进行钓鱼攻击</li><li>可以限制该功能</li></ol></li></ol><h3 id="会话管理疏忽而产生的漏洞"><a href="#会话管理疏忽而产生的漏洞" class="headerlink" title="会话管理疏忽而产生的漏洞"></a>会话管理疏忽而产生的漏洞</h3><ol><li>会话劫持<ol><li>定义：攻击者通过某种手段拿到了用户的会话ｉｄ，并非法伪装为用户</li><li>途径：非正规的生成方法去推测会话ｉｄ　　通过窃听或ｘｓｓ攻击盗取　　　通过会话固定攻击强行获取</li></ol></li><li>会话固定攻击<ol><li>定义：强制用户使用攻击者指定的会话ｉｄ的一种被动攻击</li><li>攻击者准备陷阱，先访问ｗｅｂ网站拿到未认证的会话ＩＤ，攻击者设置陷阱强制用户用该ｉｄ去进行认证</li></ol></li><li>跨站点请求伪造<ol><li>定义：攻击者通过设置好的陷阱，强制对已近完成认证的用户进行非预期的个人信息或设定信息等某些状态进行更新</li></ol></li></ol><h3 id="其他安全漏洞"><a href="#其他安全漏洞" class="headerlink" title="其他安全漏洞"></a>其他安全漏洞</h3><ol><li>密码破解<ol><li>穷举法</li><li>字典攻击</li><li>密文破解（通过散列函数加密试错比对，彩虹表，推测秘钥，加密算法的漏洞）</li><li>例如古典密码（如凯撒密码）的破解，通过每个字符的使用频率同标准频率进行比对来推测秘钥</li></ol></li><li>点击劫持<ol><li>定义：利用透明的按钮或链接作为陷阱覆盖在整个ｗｅｂ页面上，诱导用户在不知情的情况下点击而访问其内容的一种攻击方式</li></ol></li><li>DoS攻击<ol><li>定义：让运行中的服务呈停止状态的攻击。</li><li>利用访问请求造成资源过载，资源用尽的同时</li><li>通过攻击安全漏洞使服务停止</li><li>起因：服务器无法识别正常请求与攻击请求</li></ol></li><li>后门程序</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>构建web网页的技术</title>
      <link href="/2021/10/14/12.11/"/>
      <url>/2021/10/14/12.11/</url>
      
        <content type="html"><![CDATA[<h1 id="构建web网页的技术"><a href="#构建web网页的技术" class="headerlink" title="构建web网页的技术"></a>构建web网页的技术</h1><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><ol><li><p> 定义：超文本标记语言(HyperText Markup Language),是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</p></li><li><p>代码实例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;web网页构建&lt;/h1&gt;&lt;p&gt;web的构成元素&lt;/p&gt;&lt;script&gt;//插入js代码让页面有更多的样式，更人性化&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>我们平常所看到的网页基本上全部由html语言代码写出，经过浏览器渲染后呈现我们所看到的样子，当然你可以在html中插入各种文本，图片等数据，也可以嵌入一些ｊｓ代码去使我们的网页看起来更加的美观或者实现各种动态效果</p><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3></li><li><p>css(Cascading Style Sheets,层叠样式表)，可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p></li><li><p>我们可以用css这个工具去指定我们html中各个元素的样式，以美化我们的网页。也就是说css是服务于html的   </p></li></ol><h3 id="web应用"><a href="#web应用" class="headerlink" title="web应用"></a>web应用</h3><ol><li>定义：通过web功能提供的应用程序。包括常见的搜索引擎，SNS(社交网络服务),网上银行等。一种可以通过Web访问的应用程序，程序的最大好处是用户很容易访问应用程序，用户只需要有浏览器即可，不需要再安装其他软件。</li><li>由于原本的ｈｔｔｐ协议机制影响（服务器只是单纯的接受客服端的请求，然后返回请求对应的资源），我们要实现复杂的ｗｅｂ应用就需要其他的帮助。   </li></ol><h4 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h4><ol><li><p>定义：Common Gateway Interface）公共网关接口，是外部扩展应用程序与 Web 服务器交互的一个标准接口。或者说是HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。</p></li><li><p>原理：<br>（1）Web 客户端的浏览器将URL的第一部分解码与Web服务器相连。<br>（2）Web 浏览器将URL的其余部分提供给服务器。<br>（3）Web 服务器将URL转换成路径和文件名。<br>（4）Web 服务器发送 HTML 和别的组成请求页面的文件给客户。一旦页面内容传送完，<br>这个连接自动断开。<br>（5）在客户端，HTML脚本提示用户做动作或输入。当用户响应后，客户请求Web服务器建立一个新的连接。<br>（6）Web 服务器把这些信息和别的进程变量传送给由HTML以URL的形式指定CGI程序。<br>（7）CGI 根据输入作出响应，把响应结果传送给 Web 服务器。<br>（8）Web 服务器把响应的数据传给客户，完成后关闭连接。   </p></li><li><p>可以理解为CGI是服务器在传递资源给客服端前的一部加工程序，这部分程序通常可以由任何语言编写，且存在于ｗｅｂ服务器之外。</p></li><li><p>功能：绝大多数的CGI程序被用来解释处理来自表单的输入信息，并在服务器产生相应的处理，或将相应的信息反馈给浏览器。CGI程序使网页具有交互功能。（例如，我在搜索框检索文件后，程序应该在数据库中查找检索值然后生成包含一定相关性资源的html网页然后返回客服端)    </p></li><li><p>不足：CGI 使外部程序与 Web 服务器之间交互成为可能， CGI 程序运行在独立的进程中，并对每个 Web 请求建立一个进程，这种方法非常容易实现，但效率很差，难以扩展。当面对大量请求时，进程的大量建立和消亡会使操作系统性能大大下降，此外，由于地址空间无法共享，也限制了资源重用。</p><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4></li><li><p>随着CGI的普及，每次请求都要启动新的CGI程序的CGI运行机制逐渐变为了性能瓶颈，所以之后Servlet和mod_perl等可在直接ｗｅｂ服务器上运行的程序才得到了开发和普及。</p></li><li><p>定义：Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。Servlet 是独立于平台的，因为它们是用 Java 编写的。</p></li><li><p>可以将Servlet理解为为CGI的不足所做的补充，它常驻于ｗｅｂ服务器内存，因此在每次请求时，可以使程序的执行效率变得更高</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>html与css</title>
      <link href="/2021/10/14/11.20/"/>
      <url>/2021/10/14/11.20/</url>
      
        <content type="html"><![CDATA[<h2 id="兔子的hover"><a href="#兔子的hover" class="headerlink" title="兔子的ｈｏｖｅｒ"></a>兔子的ｈｏｖｅｒ</h2><h4 id="隐藏它"><a href="#隐藏它" class="headerlink" title="隐藏它"></a>隐藏它</h4><ol><li>用一个大的父级div去包裹两个小的div</li><li>将我们要隐藏的部分div用css设置属性 display: none 但是这样设置会导致它不会在隐藏时占住它应该有的空间<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.test1</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.invisible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.visible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.test1</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.invisible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invisible&quot;</span>&gt;</span></span><br><span class="line">                这是不可见的部分</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;visible&quot;</span>&gt;</span></span><br><span class="line">                这是可见的部分</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>为了解决这个问题我们改用visibility: hidden;的方法来隐藏它<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.test1</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.invisible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.visible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.test1</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.invisible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">visibility</span>: visible;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">   ```   </span><br><span class="line">   这样就可以做到在他隐藏时也会占用那部分空间</span><br><span class="line">    </span><br><span class="line">#### 选中一个div时对一个div进行操作</span><br><span class="line">1. 上文有个问题，就是当我们的鼠标移动到那个父级div的大范围时就会使隐藏的div出现</span><br><span class="line">2. 上文是选定父元素后对子元素进行的操作</span><br><span class="line">3. 所以我们应该选定visible而对invisible进行操作</span><br><span class="line">   ``` html</span><br><span class="line">   <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.test1</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.invisible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.visible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.visible</span><span class="selector-pseudo">:hover</span>+ <span class="selector-class">.invisible</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">visibility</span>: visible;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;visible&quot;</span>&gt;</span></span><br><span class="line">                这是可见的部分</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;invisible&quot;</span>&gt;</span></span><br><span class="line">                这是不可见的部分</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>此时，虽然是不可见的在下，但我们只需要用相对定位将其上移动到预先空出来的空间即可</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/14/4.11/"/>
      <url>/2021/10/14/4.11/</url>
      
        <content type="html"><![CDATA[<h1 id="原生js的网络请求"><a href="#原生js的网络请求" class="headerlink" title="原生ｊｓ的网络请求"></a>原生ｊｓ的网络请求</h1><h2 id="ajsx"><a href="#ajsx" class="headerlink" title="ajsx"></a>ajsx</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ajax 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xmlHttp;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Firefox, Opera 8.0+, Safari</span></span><br><span class="line">        xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// Internet Explorer</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Msxml2.XMLHTTP&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                alert(<span class="string">&quot;您的浏览器不支持AJAX！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xmlHttp;</span><br></pre></td></tr></table></figure><ol><li>ajsx的概念：AJAX = 异步 JavaScript 和 XML。AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</li><li>Ajax 指的是 XMLHttpRequest（XHR）</li><li>弊端：XMLHttpRequest 是一个设计粗糙的 API，不符合关注分离（Separation of Concerns）的原则，配置和调用方式非常混乱，而且基于事件的异步模型写起来也没有现代的 Promise，generator/yield，async/await 友好。在现在的开发中也基本不用ａｊｓｘ了</li></ol><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a><a href="https://segmentfault.com/a/1190000003810652">Fetch</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Oops, error&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>Fetch 的出现就是为了解决 XHR 的问题. 可见当我们使用ｆｅｔｃｈ后所用的代码比ajxs简洁了许多，但却能达到一样的目的。我们也可以进一步用箭头函数优化<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(url).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;Oops, error&quot;</span>, e))</span><br></pre></td></tr></table></figure></li><li><a href="https://www.jianshu.com/p/87823874ad62">async /await</a>: async 是一个修饰符，被它定义的函数会默认的返回一个 Promise 的 resolve的值。await同 async 一样，作为修饰符，但是它只能放在 async 内部使用。它是获取 Promise 中返回的内容， 即这个 Promise 函数中 resolve 或者 reject 的值。   因此对 async 函数可以直接进行 then 操作，返回的值即为 then() 方法的传入函数。     注：async/await 是非常新的 API，属于 ES7，目前尚在 Stage 1(提议) 阶段，这是它的完整规范。使用 Babel 开启 runtime 模式后可以把 async/await 无痛编译成 ES5 代码。也可以直接使用 regenerator 来编译到 ES5。      且由于Ｆｅｔｃｈ是基于Promise的，所以它也支持async /await</li><li>其他：Fetch 请求默认是不带 cookie 的，需要设置 fetch(url, {credentials: ‘include’})<br>服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li></ol><h2 id="Taro里面的网络请求-Taro-request-option"><a href="#Taro里面的网络请求-Taro-request-option" class="headerlink" title="Taro里面的网络请求(Taro.request(option))"></a><a href="https://taro-docs.jd.com/taro/docs/apis/network/request/request">Taro里面的网络请求</a>(Taro.request(option))</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">    Taro.request(&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">        res.data</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="attr">POST</span>:</span><br><span class="line">Taro.request(&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>:<span class="string">&#x27;http://api.tianapi.com/txapi/ncov/index&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>:&#123;</span><br><span class="line">        参数键值对</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">header</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">        res.data</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><ol><li>可见taro为我们封装了网络请求，我们可以直接使用。</li><li>当然也可以对它进行进一步<a href="https://blog.csdn.net/weixin_41530639/article/details/107482304">封装</a>来方便自己的使用，这里不过多阐述</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于原型的分享</title>
      <link href="/2021/10/14/10.11/"/>
      <url>/2021/10/14/10.11/</url>
      
        <content type="html"><![CDATA[<h1 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数"></a>1.构造函数</h1><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><ol><li>构造函数与普通函数有相同的创建方式</li><li>习惯上首字母大写</li><li>调用构造函数时用new关键字    </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="built_in">console</span>.log(per);<span class="comment">//输出一个空对象</span></span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string">即可见，构造函数即用来创建一个对象的函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 构造函数的执行流程：</span></span><br><span class="line"><span class="string">1. 用new关键字调用后立刻创建一个新的对象（申请空间）</span></span><br><span class="line"><span class="string">2. 将新建的对象设置为函数中的this，即在构造函数中可用this来引用新建对象</span></span><br><span class="line"><span class="string">3. 逐行执行构造函数中的代码（包括副作用）</span></span><br><span class="line"><span class="string">4. 将新建的对象作为返回值返回</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> js</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="built_in">console</span>.log(per); <span class="comment">//输出&#123;name：xxx&#125;；</span></span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string">但这将构造函数写死了，即该函数创建的所有对象的name属性都为”xxx“   </span></span><br><span class="line"><span class="string">于是    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> js</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name=name;</span><br><span class="line">    <span class="built_in">this</span>.age=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;xxx&quot;</span>,<span class="number">27</span>);</span><br><span class="line">per.gender = <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(per); <span class="comment">//输出&#123;name:xxx,age:27,男&#125;</span></span><br></pre></td></tr></table></figure><h5 id="使用同一个构造函数创建的对象，我们可以称他们为一类对象，也可以将构造函数称为一个类"><a href="#使用同一个构造函数创建的对象，我们可以称他们为一类对象，也可以将构造函数称为一个类" class="headerlink" title="使用同一个构造函数创建的对象，我们可以称他们为一类对象，也可以将构造函数称为一个类"></a>使用同一个构造函数创建的对象，我们可以称他们为一类对象，也可以将构造函数称为一个类</h5><h5 id="用构造函数创建的对象，称为该类的实例"><a href="#用构造函数创建的对象，称为该类的实例" class="headerlink" title="用构造函数创建的对象，称为该类的实例"></a>用构造函数创建的对象，称为该类的实例</h5><h3 id="构造函数的一些方法"><a href="#构造函数的一些方法" class="headerlink" title="构造函数的一些方法"></a>构造函数的一些方法</h3><h5 id="1-instanceof-方法"><a href="#1-instanceof-方法" class="headerlink" title="1.instanceof 方法"></a>1.instanceof 方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="built_in">console</span>.log(per <span class="keyword">instanceof</span> Person); <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">console</span>.log(dog <span class="keyword">instanceof</span> Person); <span class="comment">//输出false</span></span><br><span class="line"><span class="built_in">console</span>.log(per <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//输出true</span></span><br><span class="line"><span class="built_in">console</span>.log(dog <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//输出true</span></span><br></pre></td></tr></table></figure><ol><li>用instanceof方法可用检查一个对象是否是一个类的实例</li><li>所有的对象都是Object的后代</li></ol><p>但有一些需要被反复利用的同种方法，如果我们将他直接写入构造函数中，那么每一个new关键字的调用都会去重新创建一个新的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name= name;</span><br><span class="line">    <span class="built_in">this</span>.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;hollw,myname is&quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="built_in">console</span>.log(per1.sayName == per2.sayName);<span class="comment">//输出false</span></span><br></pre></td></tr></table></figure><h3 id="但我们若对一类对象中的同一种方法，我们没有必要去在构造函数中反复创建"><a href="#但我们若对一类对象中的同一种方法，我们没有必要去在构造函数中反复创建" class="headerlink" title="但我们若对一类对象中的同一种方法，我们没有必要去在构造函数中反复创建"></a>但我们若对一类对象中的同一种方法，我们没有必要去在构造函数中反复创建</h3><h3 id="我们可用将他写在全局作用域中，但却会污染全局作用域的命名空间，且定义在全局作用域中也不够安全（容易被覆盖）"><a href="#我们可用将他写在全局作用域中，但却会污染全局作用域的命名空间，且定义在全局作用域中也不够安全（容易被覆盖）" class="headerlink" title="我们可用将他写在全局作用域中，但却会污染全局作用域的命名空间，且定义在全局作用域中也不够安全（容易被覆盖）"></a>我们可用将他写在全局作用域中，但却会污染全局作用域的命名空间，且定义在全局作用域中也不够安全（容易被覆盖）</h3><h1 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型(prototype)"></a>原型(prototype)</h1><h3 id="定义：我们所创建的每一个函数，解析器都会向函数中加入一个属性－prototype对应一个原型对象"><a href="#定义：我们所创建的每一个函数，解析器都会向函数中加入一个属性－prototype对应一个原型对象" class="headerlink" title="定义：我们所创建的每一个函数，解析器都会向函数中加入一个属性－prototype对应一个原型对象"></a>定义：我们所创建的每一个函数，解析器都会向函数中加入一个属性－prototype对应一个原型对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);<span class="comment">// 输出一个空对象</span></span><br></pre></td></tr></table></figure><p>但如果函数作为普通函数调用，那么prototype毫无作用　　　　<br>但其作为构造函数调用来创建的对象都会有一个属性指向该构造函数的原型对象，可以通过__proto__来访问该属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="built_in">console</span>.log(per1.__proto__ == per2.__proto__);<span class="comment">//输出　true</span></span><br><span class="line"><span class="built_in">console</span>.log(per1.__proto__);<span class="comment">//输出一个对象</span></span><br></pre></td></tr></table></figure><p>原型对象相当于该类实例所共有的空间，所有实例均可访问，所以我们可以将该类对象共有的属性加入原型对象</p><h3 id="向原型对象加入属性"><a href="#向原型对象加入属性" class="headerlink" title="向原型对象加入属性"></a>向原型对象加入属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person;</span><br><span class="line">Person.peototype.a = <span class="number">123</span>;<span class="comment">//设置原型对象中的属性ａ为１２３</span></span><br><span class="line">per2.a=<span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(per1.a);<span class="comment">//输出１２３</span></span><br><span class="line"><span class="built_in">console</span>.log(per2.a);<span class="comment">//输出４５６</span></span><br></pre></td></tr></table></figure><p>可见，我们并未向per1中添加ａ属性，但输出了１２３<br>即：当我们访问对象中的一个属性或者方法时，它会在自身中先查找，若找到则直接使用，若没找到，则会在原型中去找</p><h3 id="用hasOwnproperty方法去检查对象自身中是否含有该属性"><a href="#用hasOwnproperty方法去检查对象自身中是否含有该属性" class="headerlink" title="用hasOwnproperty方法去检查对象自身中是否含有该属性"></a>用hasOwnproperty方法去检查对象自身中是否含有该属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person;</span><br><span class="line">Person.peototype.a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">in</span> per);<span class="comment">//输出ｔｒｕｅ</span></span><br><span class="line"><span class="built_in">console</span>.log(per.hasOwnproperty(<span class="string">&quot;a&quot;</span>));<span class="comment">// 输出ｆａｌｓｅ</span></span><br></pre></td></tr></table></figure><p>即用ｉｎ来检查时，若该对象中没有但原型中有也会输出ｔｒｕｅ　　　　<br>但我们用hasOwnproperty()来检查时，自会检查自身而不会牵扯到原型<br>　　　　　　<br>但是，如果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="built_in">console</span>.log(per.hasOwnproperty(<span class="string">&quot;hasOwnproperty&quot;</span>));<span class="comment">//输出false</span></span><br></pre></td></tr></table></figure><p>你就会发现，我们并没有定义这个属性，它也不在我们定义的对象中，那它从何而来？</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="built_in">console</span>.log(per.hasOwnproperty(<span class="string">&quot;hasOwnproperty&quot;</span>));<span class="comment">//输出false</span></span><br><span class="line"><span class="built_in">console</span>.log(per.__proto__.hasOwnproperty(<span class="string">&quot;hasOwnproperty&quot;</span>));<span class="comment">//输出false</span></span><br><span class="line"><span class="built_in">console</span>.log(per.__proto__.__proto__.hasOwnproperty(<span class="string">&quot;hasOwnproperty&quot;</span>));<span class="comment">//输出true</span></span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string">构造函数的原型对象也是一个对象，是对象，那么它就应该有他的原型　　　　</span></span><br><span class="line"><span class="string">理论上，原型的原型也是一个对象，那么它也应该有他的原型　　　</span></span><br><span class="line"><span class="string">但是</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> js</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(per.__proto__.__proto__.__proto__);<span class="comment">//输出null</span></span><br></pre></td></tr></table></figure><p>我们可以理解　　　<br>当我们访问一个对象的属性或者方法时</p><ol><li>先在自身中查找属性，若找到，则直接使用</li><li>若没找到，则到其原型中找</li><li>若原型中没找到，则到原型的原型中找</li><li>若直到找到了Object对象的原型(祖先原型)仍未找到，返回undefined</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于auth登录</title>
      <link href="/2021/10/14/auth/"/>
      <url>/2021/10/14/auth/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/12/hello-world/"/>
      <url>/2021/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
